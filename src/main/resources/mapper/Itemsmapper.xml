<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.tianshu.dao.mapper.Itemsmapper">
    <resultMap id="BaseResultMap" type="com.example.tianshu.dao.model.ItemsDO">
        <id property="id" column="id" jdbcType="INTEGER"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="price" column="price" jdbcType="VARCHAR"/>
        <result property="itemNumber" column="item_number" jdbcType="VARCHAR"/>
        <result property="image" column="image" jdbcType="VARCHAR"/>
        <result property="delflag" column="delflag" jdbcType="INTEGER"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="source" column="source" jdbcType="VARCHAR"/>
        <result property="provider" column="provider" jdbcType="VARCHAR"/>
        <result property="uid" column="uid" jdbcType="VARCHAR"/>
        <result property="type" column="type" jdbcType="VARCHAR"/>
        <result property="district" column="district" jdbcType="VARCHAR"/>
        <result property="imageUrls" column="imageUrls" jdbcType="VARCHAR"/>
        <result property="realQuantity" column="realQuantity" jdbcType="INTEGER"/>
        <result property="realPrice" column="realPrice" jdbcType="DOUBLE"/>
        <result property="soldedNum" column="soldedNum" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="salesVolumeMap" type="com.example.tianshu.dao.model.salesVolumeDTO">
        <result property="annualSales" column="annualSales"/>
        <result property="historicalSales" column="historicalSales"/>
        <result property="monthklySales" column="monthklySales"/>
        <result property="dailySales" column="dailySales"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, name, price, item_number, image, uid, remark, district, imageUrls, type, realQuantity
    </sql>

    <select id="getAllItems" parameterType="map" resultMap="BaseResultMap">
        SELECT
            id, name, price, image, item_number, uid, remark, district, imageUrls
        FROM items
        WHERE delflag = 0
        ORDER BY id
            LIMIT #{pageSize} OFFSET #{pageNum}
    </select>

    <select id="getQueryItems" parameterType="com.example.tianshu.dao.model.QueryItemsDTO" resultMap="BaseResultMap">
        SELECT
        a.id,
        a.NAME,
        a.price,
        a.image,
        a.item_number,
        a.uid,
        a.remark,
        a.district,
        a.imageUrls,
        a.delflag,
        b.soldedNum,
        -- 计算总商品数的子查询
        (SELECT COUNT(*)
        FROM items
        WHERE delflag IN (0, 2)
        <if test="type != null and type != ''">
            AND a.type LIKE CONCAT('%', #{type}, '%')
        </if>
        <if test="district != null and district != ''">
            AND a.district LIKE CONCAT('%', #{district}, '%')
        </if>
        <if test="name != null and name != ''">
            AND a.name LIKE CONCAT('%', #{name}, '%')
        </if>
        ) AS totalItems
        FROM items a
        LEFT JOIN view_soldednum b ON a.uid = b.uid
        WHERE a.delflag IN (0, 2)
        <if test="type != null and type != ''">
            AND a.type LIKE CONCAT('%', #{type}, '%')
        </if>
        <if test="district != null and district != ''">
            AND a.district LIKE CONCAT('%', #{district}, '%')
        </if>
        <if test="name != null and name != ''">
            AND a.name LIKE CONCAT('%', #{name}, '%')
        </if>
        GROUP BY a.id, a.NAME, a.price, a.image, a.item_number, a.uid, a.remark, a.district, a.imageUrls, a.delflag, b.soldedNum
        ORDER BY
        CASE
        WHEN a.delflag = 0 THEN 0 ELSE 1
        END,
        a.realQuantity DESC
        LIMIT #{pageSize} OFFSET #{offset};
    </select>

    <select id="getItemById" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM items
        WHERE uid = #{uid} and delflag in (0, 99)
    </select>

    <insert id="insertItem" keyColumn="id" keyProperty="id">
        INSERT INTO items
            (name, price, item_number, imageUrls,image, type, district, remark, uid, provider, delflag, realQuantity, realPrice)
        VALUES
            (#{name}, #{price}, #{itemNumber}, #{imageUrls},#{image}, #{type}, #{district}, #{remark}, #{uid}, #{provider}, 0, #{realQuantity}, #{realPrice})
    </insert>

    <update id="updateItem">
        UPDATE items
        <set>
            <if test="image != null">image = #{image},</if>
        </set>
        WHERE uid = #{uid}
    </update>


    <update id="deleteItemById" parameterType="java.lang.String">
        UPDATE items
        SET
            delflag = 1
        WHERE uid = #{uid}
    </update>

    <update id="soldItemById" parameterType="map">
        UPDATE items
        <set>
            item_number = #{itemNumber},
            realQuantity = #{realQuantity}
        </set>
        WHERE uid = #{uid}
    </update>

    <update id="updateInfo" parameterType="map">
        UPDATE items
        <set>
            <if test="district != null">district = #{district},</if>
            <if test="name != null">name = #{name},</if>
            <if test="price != null">price = #{price},</if>
            <if test="itemNumber != null">item_number = #{itemNumber},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="realQuantity != null">realQuantity = #{realQuantity},</if>
        </set>
        WHERE uid = #{uid}
    </update>

    <insert id="insertsoldedItem" keyColumn="id" keyProperty="id">
        INSERT INTO solded_item
        (price, number, uid, district, type, source, name,instime)
        VALUES
        (#{price}, #{number}, #{uid}, #{district},#{type},#{source},#{name},#{instime})
    </insert>


<update id="soldItemBytableById" parameterType="map">
    <choose>
        <when test="source == 1">
            UPDATE items_warehouse
            <set>
                realQuantity = #{realQuantity}
            </set>
            WHERE uid = #{uid}
        </when>
        <when test="source == 2">
            UPDATE items_2024ta
            <set>
                realQuantity = #{realQuantity}
            </set>
            WHERE uid = #{uid}
        </when>
        <when test="source == 3">
            UPDATE items_11jin
            <set>
                realQuantity = #{realQuantity}
            </set>
            WHERE uid = #{uid}
        </when>
    </choose>
</update>

<select id="selectsoldItemBytableById" parameterType="map" resultMap="BaseResultMap">
    <choose>
        <when test="source == 1">
            SELECT uid,name,delflag,realQuantity,realPrice FROM items_warehouse WHERE uid = #{uid}
        </when>
        <when test="source == 2">
            SELECT uid,name,delflag,realQuantity,realPrice FROM items_2024ta WHERE uid = #{uid}
        </when>
        <when test="source == 3">
            SELECT uid,name,delflag,realQuantity,realPrice FROM items_11jin WHERE uid = #{uid}
        </when>
    </choose>
</select>

<insert id="insertsoldPartItem"  keyColumn="id" keyProperty="id">
    <choose>
        <when test="source == 1">
            INSERT INTO items_warehouse
            (name, type, district, uid, provider, delflag, realQuantity, realPrice)
            VALUES
            (#{name},  #{type}, #{district}, #{uid}, #{provider}, 0, #{realQuantity}, #{realPrice})
        </when>
        <when test="source == 2">
            INSERT INTO items_2024ta
            (name, type, district, uid, provider, delflag, realQuantity, realPrice)
            VALUES
            (#{name},  #{type}, #{district}, #{uid}, #{provider}, 0, #{realQuantity}, #{realPrice})
        </when>
        <when test="source == 3">
            INSERT INTO items_11jin
            (name, type, district, uid, provider, delflag, realQuantity, realPrice)
            VALUES
            (#{name},  #{type}, #{district}, #{uid}, #{provider}, 0, #{realQuantity}, #{realPrice})
        </when>
    </choose>
</insert>

<update id="addNumById" parameterType="map">
    UPDATE items
    <set>
        realQuantity = #{realQuantity}, item_number = #{itemNumber}
    </set>
    WHERE uid = #{uid}
</update>

<insert id="addParyNumById" parameterType="map">
    <choose>
        <when test="addSource == 1">
            INSERT INTO items_warehouse (uid, realQuantity, district, type, name)
            VALUES (#{uid}, #{realQuantity}, #{district}, #{type}, #{name})
            ON DUPLICATE KEY UPDATE
            realquantity = VALUES(realQuantity);
        </when>
        <when test="addSource == 2">
            INSERT INTO items_2024ta (uid, realQuantity, district, type, name)
            VALUES (#{uid}, #{realQuantity}, #{district}, #{type}, #{name})
            ON DUPLICATE KEY UPDATE
            realquantity = VALUES(realQuantity);
        </when>
        <when test="addSource == 3">
            INSERT INTO items_11jin (uid, realQuantity, district, type, name)
            VALUES (#{uid}, #{realQuantity}, #{district}, #{type}, #{name})
            ON DUPLICATE KEY UPDATE
            realquantity = VALUES(realQuantity);
        </when>
    </choose>
</insert>

</mapper>
